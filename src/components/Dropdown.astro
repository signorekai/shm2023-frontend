---
export interface Props {
  className?: string;
  options: [{ text: string; value: string }];
  defaultOption: { text: string; value: string };
  eventName: string;
}
const { className, options, defaultOption, eventName } = Astro.props;
---

<div
  x-data={`dropdown(${JSON.stringify({ options, defaultOption })})`}
  x-effect={`$dispatch("${eventName}", {value:selected.value});`}
  class:list={["dropdown", className]}
  x-id="['dropdown-button']"
>
  <button
    class="dropdown-btn"
    x-ref="button"
    @click="toggle()"
    :aria-expanded="open"
    :aria-controls="$id('dropdown-button')"
    type="button"
  >
    <span x-text="selected.text" class="text-left"></span>
    <i
      class="fal text-lg scale-x-110"
      x-bind:class="open ? 'fa-chevron-up': 'fa-chevron-down'"></i>
  </button>
  <div
    x-ref="panel"
    x-bind="panel"
    x-show="open"
    class="dropdown-wrapper"
    x-transition.origin.top.center
    x-on:click.outside="close($refs.button)"
    style="display: none"
  >
    {
      options.map((option) => (
        <a
          href={`#${option.value}`}
          class="dropdown-option"
          x-on:click={`selected={text: "${option.text}", value: "${option.value}"}; close($refs.button);`}
          x-bind:class={`selected.value === "${option.value}" ? 'font-bold': ''`}
        >
          {option.text}
        </a>
      ))
    }
  </div>
</div>

<style>
  .dropdown {
    @apply relative z-20;
  }

  .dropdown-wrapper {
    @apply absolute bg-white-off drop-shadow-sm w-full px-6 py-6 rounded-b-lg flex flex-col gap-y-4;
  }

  .dropdown-btn {
    @apply rounded-lg border-1 text-center w-full bg-white-off;
    @apply flex flex-row justify-between items-center px-6 py-3;
  }
</style>

<script is:inline>
document.addEventListener("alpine:init", () => {
  Alpine.data("dropdown", ({ options, defaultOption }) => ({
    options,
    open: false,
    selected: defaultOption,
    panel: {
      ["@filter-project.window"]() {
        if (this.selected.value !== this.$event.detail.value) {
          for (const { text, value } of this.options) {
            if (value === this.$event.detail.value) {
              this.selected = { text, value };
            }
          }
        }
      },
    },
    toggle() {
      if (this.open) {
        return this.close();
      }

      this.$refs.button.focus();

      this.open = true;
    },
    close(focusAfter) {
      if (!this.open) return;
      this.open = false;

      focusAfter && focusAfter.focus();
    },
  }));
});
</script>
