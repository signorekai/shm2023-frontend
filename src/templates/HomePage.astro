---
export interface Props {
  title: string;
  data?: object;
}

import Button from "../components/Button.astro";
import Layout from "../layouts/Layout.astro";

const { title = "", data } = Astro.props;
---

<Layout
  title={title}
  data={data}
  htmlClassName="snap-y snap-mandatory"
  footerClassName="!mt-0 snap-start"
  enqueuedStylesheets={data.enqueuedStylesheets.edges || []}
>
  <style is:global>
    body.home-page .header {
      @apply fixed z-50;
    }
  </style>
  <div
    x-data="{show: false}"
    x-cloak
    x-show="show"
    @lotties-fully-loaded.window.camel.once="show = true"
    @scroll.window.passive="if (show) show = false"
    @scrollend.window.passive="if (show) show = false"
    x-transition:enter="transition delay-[450ms] duration-300 ease-in-out"
    x-transition:enter-start="opacity-0 -translate-y-12"
    x-transition:enter-end="opacity-100 translate-y-0"
    x-transition:leave="transition duration-200 ease-out"
    x-transition:leave-end="opacity-0 -translate-y-12"
    x-transition:leave-start="opacity-100 translate-y-0"
    class="uppercase fixed bottom-4 left-1/2 -translate-x-1/2 text-center text-grey text-base"
  >
    Scroll to enter
    <br /><br />
    <i class="fa fal fa-chevron-down animate-bounce"></i>
  </div>
  <div
    x-data="{total: 0, current: 0, timer: false}"
    x-show="current !== total"
    x-transition:leave="opacity-0 translate-y-8"
    class="fixed top-2/3 left-1/2 -translate-x-1/2 transition duration-300 delay-500 text-center text-grey text-base"
    x-init="total = document.querySelectorAll('lottie-player').length; document.body.style.overflow='hidden'; timer = setTimeout(() => { $el.innerHTML='Sorry... we are facing some issue loading the animations,<br>please try refreshing the page!'}, 4000)"
    @lottie-loaded.camel.window="current += 1"
    x-effect="if (current === total) { $dispatch('lottiesFullyLoaded'); clearTimeout(timer); document.body.style.removeProperty('overflow') }"
  >
    Loading... <span x-text="`${Math.round(current / total * 100)}%`"></span>
  </div>
  <div
    class="lottie-container min-h-screen"
    x-data="lottieLoop('#intro-container', false)"
  >
    <lottie-player
      id="start"
      mode="normal"
      autoplay
      loop
      class="lottie"
      preserveAspectRatio="xMidYMid slice"
      x-bind="splash"
      x-ref="loopRef"
      src="/lottie/00.json"></lottie-player>
  </div>
  <div
    class="lottie-container"
    id="intro-container"
    x-data="lottieLoop('#inclusion-container')"
  >
    <lottie-player
      mode="normal"
      class="lottie lottie--inactive"
      x-bind="loopStart"
      x-ref="startRef"
      preserveAspectRatio="xMidYMid slice"
      mobile-src="/lottie/01-intro/mobile/intro.json"
      desktop-src="/lottie/01-intro/intro.json"></lottie-player>
    <lottie-player
      loop
      mode="normal"
      class="lottie lottie--inactive"
      preserveAspectRatio="xMidYMid slice"
      background="#000000"
      x-bind="loop"
      x-ref="loopRef"
      revert-on-exit
      mobile-src="/lottie/01-intro/mobile/loop.json"
      desktop-src="/lottie/01-intro/loop.json"></lottie-player>
    <lottie-player
      mode="normal"
      class="lottie lottie--inactive"
      preserveAspectRatio="xMidYMid slice"
      x-bind="loopExit"
      x-ref="endRef"
      mobile-src="/lottie/01-intro/mobile/exit.json"
      desktop-src="/lottie/01-intro/exit.json"></lottie-player>
  </div>
  <div
    class="lottie-container"
    id="inclusion-container"
    x-data="lottieLoop('#projects-container', false)"
  >
    <lottie-player
      mode="normal"
      class="lottie lottie--inactive"
      preserveAspectRatio="xMidYMid slice"
      renderer="canvas"
      x-bind="loop"
      x-ref="loopRef"
      mobile-src="/lottie/02-inclusion/mobile/data.json"
      desktop-src="/lottie/02-inclusion/data3.json"></lottie-player>
    <div
      class="absolute bottom-[35%] lg:bottom-12 left-1/2 -translate-x-1/2 z-20"
      style="transition-delay: 1000ms"
      x-show="showButton"
      x-cloak
      x-transition:enter="transition ease-out duration-900"
      x-transition:enter-start="translate-y-[5rem] opacity-0"
      x-transition:enter-end="translate-y-0 opacity-100"
    >
      <Button
        href="/about"
        theme="black"
        className="bg-white lg:scale-110 w-max"
      >
        Learn About Us
      </Button>
    </div>
  </div>
  <div
    class="lottie-container bg-[var(--bg-color)]"
    id="projects-container"
    x-data="lottieLoop('#collective-container', false)"
  >
    <lottie-player
      mode="normal"
      class="lottie lottie--inactive"
      x-bind="loopStart"
      x-ref="startRef"
      preserveAspectRatio="xMidYMid slice"
      @play.once="entered=true"
      @wheel.once.passive="animateLoopExit()"
      renderer="canvas"
      mobile-src="/lottie/03-projects/mobile/intro.json"
      desktop-src="/lottie/03-projects/intro2.json"></lottie-player>
    <lottie-player
      loop
      mode="normal"
      class="lottie lottie--inactive"
      preserveAspectRatio="xMidYMid slice"
      x-bind="loop"
      x-ref="loopRef"
      renderer="canvas"
      mobile-src="/lottie/03-projects/mobile/loop.json"
      desktop-src="/lottie/03-projects/loop2.json"></lottie-player>
    <div
      class="absolute bottom-[5vh] left-1/2 -translate-x-1/2 z-20"
      style="transition-delay: 2400ms"
      x-transition:enter="transition ease-out duration-500"
      x-transition:enter-start="translate-y-[5rem] opacity-0"
      x-transition:enter-end="translate-y-0 opacity-100"
      x-show="showButton"
      x-cloak
    >
      <Button href="/projects" theme="black" className="lg:scale-110 w-max">
        Explore Projects
      </Button>
    </div>
  </div>
  <div
    class="lottie-container bg-[var(--bg-color)]"
    id="collective-container"
    x-data="lottieLoop('#joinus-container')"
  >
    <lottie-player
      mode="normal"
      class="lottie lottie--inactive"
      x-bind="loopStart"
      x-ref="startRef"
      background="#F2F1EE"
      @play="setTimeout(() => {entered=true}, 500)"
      preserveAspectRatio="xMidYMid slice"
      mobile-src="/lottie/04-collective/mobile/intro.json"
      desktop-src="/lottie/04-collective/intro2.json"></lottie-player>
    <lottie-player
      loop
      mode="normal"
      class="lottie lottie--inactive"
      preserveAspectRatio="xMidYMid slice"
      x-bind="loop"
      x-ref="loopRef"
      background="#F2F1EE"
      renderer="canvas"
      mobile-src="/lottie/04-collective/mobile/loop.json"
      desktop-src="/lottie/04-collective/loop2.json"></lottie-player>
    <lottie-player
      mode="normal"
      class="lottie lottie--inactive"
      preserveAspectRatio="xMidYMid slice"
      x-bind="loopExit"
      x-ref="endRef"
      background="#F2F1EE"
      renderer="canvas"
      mobile-src="/lottie/04-collective/mobile/exit.json"
      desktop-src="/lottie/04-collective/exit2.json"></lottie-player>
    <div
      class="absolute top-[60%] lg:top-[55%] left-1/2 -translate-x-1/2 z-20"
      style="transition-delay: 0ms"
      x-transition:leave="transition ease-in !delay-0 duration-[500ms]"
      x-transition:leave-start="translate-y-0 opacity-100"
      x-transition:leave-end="translate-y-[-40vh] opacity-0"
      x-transition:enter="transition ease-out duration-500"
      x-transition:enter-start="translate-y-[5rem] opacity-0"
      x-transition:enter-end="translate-y-0 opacity-100"
      x-show="showButton"
      x-cloak
    >
      <Button href="/people" theme="black" className="lg:scale-110 w-max">
        Meet our Collective
      </Button>
    </div>
  </div>
  <div
    class="lottie-container bg-[var(--bg-color)]"
    id="joinus-container"
    x-data="lottieLoop(false, false)"
  >
    <lottie-player
      mode="normal"
      class="lottie lottie--inactive"
      x-bind="loopStart"
      x-ref="startRef"
      renderer="canvas"
      preserveAspectRatio="xMidYMid slice"
      @play="setTimeout(() => {entered=true}, 600)"
      mobile-src="/lottie/05-joinus/mobile/intro.json"
      desktop-src="/lottie/05-joinus/intro2.json"></lottie-player>
    <lottie-player
      loop
      mode="normal"
      class="lottie lottie--inactive"
      preserveAspectRatio="xMidYMid slice"
      renderer="canvas"
      x-bind="loop"
      x-ref="loopRef"
      @play.once="$store.scrollStop.active = false; if (window.innerWidth > 1024) { document.documentElement.classList.remove('snap-y') }"
      mobile-src="/lottie/05-joinus/mobile/loop.json"
      desktop-src="/lottie/05-joinus/loop2.json"></lottie-player>
    <div
      class="absolute top-[37%] left-1/2 -translate-x-1/2 z-20"
      style="transition-delay: 0ms"
      x-transition:enter="transition ease-out duration-500"
      x-transition:enter-start="translate-y-[5rem] opacity-0"
      x-transition:enter-end="translate-y-0 opacity-100"
      x-show="showButton"
      x-cloak
    >
      <Button href="/get-involved" theme="black" className="w-max lg:scale-110">
        Get Involved
      </Button>
    </div>
  </div>
  <!-- <section class="content-wrapper" set:html={data.content} /> -->
</Layout>
<script is:inline>
document.addEventListener("alpine:init", () => {
  const DESKTOP_BREAKPOINT = 1024;
  Alpine.data("lottieLoop", (nextSelector, hasExitAnimation = true) => ({
    touchArea: null,
    initialWidth: 0,
    init() {
      this.initialWidth = window.innerWidth;
      const players = this.$el.querySelectorAll("lottie-player");

      this.$watch("entered", (entered) => {
        if (entered) {
          this.showButton = true;
        }
      });

      players.forEach((player) => {
        const isMobile = window.innerWidth <= 1024;

        if (!isMobile && player.getAttribute("src") === null) {
          console.log(268, player.getAttribute("desktop-src"));
          player.load(player.getAttribute("desktop-src"));
        } else if (isMobile && player.getAttribute("src") === null) {
          console.log(273, player.getAttribute("mobile-src"));
          player.load(player.getAttribute("mobile-src"));
          player.setAttribute("src", player.getAttribute("mobile-src"));
        }

        player.addEventListener("ready", () => {
          this.$dispatch("lottieLoaded");
        });
      });
    },
    hasExitAnimation,
    nextSelector,
    buttonDelay: 1000,
    entered: false,
    showButton: false,
    checkResizing() {
      if (
        (this.initialWidth < DESKTOP_BREAKPOINT &&
          window.innerWidth >= DESKTOP_BREAKPOINT) ||
        (this.initialWidth >= DESKTOP_BREAKPOINT &&
          window.innerWidth < DESKTOP_BREAKPOINT)
      ) {
        window.location.reload();
      }

      console.log("resize player!");
      this.$el.resize();
    },
    loopStart: {
      "@resize.window.debounce"() {
        this.checkResizing();
      },
      "@complete"() {
        this.$refs.loopRef.classList.remove("lottie--inactive");
        this.$nextTick(() => {
          this.$el.remove();
          this.$refs.loopRef.play();
        });
      },
      "x-intersect.threshold.90.once"() {
        console.log("x-intersect!");
        this.$el.classList.remove("lottie--inactive");
        this.$el.play();
        if (this.nextSelector) {
          if (window.innerWidth >= DESKTOP_BREAKPOINT) {
            this.$store.scrollStop.active = true;
          }
        }
      },
    },
    animateLoopExit() {
      if (this.$el.getAttribute("revert-on-exit") && this.hasExitAnimation) {
        console.log(338);
        this.$el.setDirection(-1);
        this.$el.toggleLooping();
        this.$el.setSpeed(10);
        this.$el.addEventListener("complete", () => {
          const next = this.$refs.endRef;
          next.classList.remove("lottie--inactive");
          next.play();
          this.$el.classList.add("lottie--inactive");
          // this.entered = false;
        });
      } else {
        console.log(350);
        if (this.hasExitAnimation && this.entered) {
          console.log(352);
          const next = this.$refs.endRef;
          next.classList.remove("lottie--inactive");
          next.play();
          this.$el.classList.add("lottie--inactive");
          this.entered = false;
          this.showButton = false;
        } else if (this.entered && this.hasExitAnimation === false) {
          console.log(359);
          this.scrollToNextContainer();
        } else {
          console.log(362, this.entered, this.hasExitAnimation);
        }
      }
    },
    scrollToNextContainer() {
      this.$store.scrollStop.active = false;
      if (this.nextSelector) {
        const next = document.querySelector(this.nextSelector);
        next.scrollIntoView({ behavior: "smooth" });
        const loopElem = this.$refs.loopRef;
        setTimeout(() => {
          if (this.hasExitAnimation) {
            this.$el.remove();
          }
          loopElem.classList.remove("lottie--inactive");
          this.showButton = true;
          if (loopElem.getAttribute("revert-on-exit")) {
            loopElem.setDirection(1);
            loopElem.setSpeed(1);
            loopElem.toggleLooping();
            loopElem.play();
          }
        }, 2000);
      } else {
        console.log(386);
        this.$store.scrollStop.active = false;
      }
    },
    splash: {
      "@resize.window.debounce"() {
        this.checkResizing();
      },
      "@play.once"() {
        if (this.entered === false) {
          if (window.innerWidth >= DESKTOP_BREAKPOINT) {
            this.$store.scrollStop.active = true;
          }
          this.entered = true;
        }
      },
      "@lotties-fully-loaded.window.camel.once"() {
        const goNext = (event) => {
          if (event.deltaY > 0) {
            this.animateLoopExit();
          } else {
            if (this.nextSelector) {
              this.$store.scrollStop.active = false;
            }
          }
        };

        console.log("fully loaded", 409);
        this.$el.addEventListener("scrollend", goNext, {
          passive: true,
          once: true,
        });
        this.$el.addEventListener("wheel", goNext, {
          passive: true,
          once: true,
        });
      },
    },
    loop: {
      "@resize.window.debounce"() {
        this.checkResizing();
      },
      "x-intersect.threshold.90.once"() {
        console.log(416);
        if (
          this.$refs.loopRef &&
          !!!this.$refs.startRef &&
          !!!this.$refs.endRef
        ) {
          this.$store.scrollStop.active = false;
        }
        if (!!!this.$refs.startRef) {
          this.$el.classList.remove("lottie--inactive");
          this.$el.play();
        }
      },
      "@play.once"() {
        if (this.entered === false) {
          if (window.innerWidth >= DESKTOP_BREAKPOINT) {
            this.$store.scrollStop.active = true;
          }
          this.entered = true;
        }
      },
      "@wheel.once.passive"(event) {
        if (event.deltaY > 0) {
          this.animateLoopExit();
        } else {
          if (this.nextSelector) {
            this.$store.scrollStop.active = false;
          }
        }
      },
      "@scrollend.once.passive"(event) {
        console.log(event);
        this.animateLoopExit();
      },
    },
    loopExit: {
      "@complete.once"() {
        this.scrollToNextContainer();
      },
    },
  }));
});

function ready(fn) {
  if (document.readyState !== "loading") {
    fn();
  } else {
    document.addEventListener("DOMContentLoaded", fn);
  }
}

ready(() => {
  if (history.scrollRestoration) {
    history.scrollRestoration = "manual";
  } else {
    window.onbeforeunload = function () {
      window.scrollTo(0, 0);
    };
  }
  setTimeout(() => {
    window.scrollTo(0, 0);
    document.body.scrollTop = document.scrollingElement.scrollTop = 0;
  }, 10);
});
</script>
