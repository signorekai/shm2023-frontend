---
import { Image } from "astro-preload/components";

import Layout from "../layouts/Layout.astro";
import Dropdown from "../components/Dropdown.astro";
import { fetchGQL, getImageUrl } from "../helpers";

const { data: projectData } = await fetchGQL(`{
  projectTypes {
    edges {
      node {
        name
        slug
      }
    }
  }
  projects {
    edges {
      node {
        title
        slug
        projectTypes {
          edges {
            node {
              slug
              name
            }
          }
        }
        highlightImage {
          highlightImage {
            sourceUrl
            mediaDetails {
              width
              height
              sizes {
                sourceUrl
                height
                width
              }
            }
          }
        }
        featuredImage {
          node {
            sourceUrl
            mediaDetails {
              width
              height  
              sizes {
                sourceUrl
                height
                width
              }
            }
          }
        }
      }
    }
  }
}`);
const projects = projectData.projects.edges;
const projectTypes = projectData.projectTypes.edges;

export interface Props {
  title: string;
  data?: object;
}

const { title = "Projects", data } = Astro.props;
---

<Layout title={title} data={data}>
  <div class="container shm-grid mt-24 mb-10 lg:my-32">
    <h1 class="page-header">Projects</h1>
  </div>
  <div
    class="container shm-grid border-b-1 lg:border-b-0 lg:border-t-1 py-6 lg:py-12"
  >
    <div
      class="col-start-10 col-end-15 flex flex-col md:flex-row md:items-center"
    >
      <span>Filter by:</span>
      <Dropdown
        className="flex-1 max-md:mt-4 md:ml-6"
        defaultOption={{ text: "All Projects", value: "all-projects" }}
        eventName="filter-project"
        options={[
          {
            text: "All Projects",
            value: "all-projects",
          },
          ...projectTypes.map(({ node: type }) => ({
            text: type.name,
            value: type.slug,
          })),
        ]}
      />
    </div>
  </div>
  <div class="container max-lg:mt-6 gap-x-14 gap-y-8">
    <div class="-mx-5" x-data="isotope" x-ref="grid" x-bind="grid">
      {
        projects.map(({ node: item }) => {
          console.log(
            101,
            JSON.stringify(item.highlightImage.highlightImage, false, "  ")
          );
          const featuredImage = getImageUrl(item.featuredImage.node, 400);
          const highlightImage = getImageUrl(
            item.highlightImage.highlightImage,
            400
          );
          return (
            <div
              class={`project-card ${item.projectTypes.edges
                .map(({ node: type }) => type.slug)
                .join(" ")}`}
            >
              <a href={`/project/${item.slug}`} class="group">
                <div class="product-image-wrapper">
                  {featuredImage && (
                    <Image
                      loading="lazy"
                      class={`${
                        highlightImage && "group-hover:opacity-0"
                      } origin-center transition-all duration-300 group-hover:scale-110`}
                      url={featuredImage.url}
                      style={`aspect-ratio: ${featuredImage.width} / ${featuredImage.height}`}
                      alt=""
                    />
                  )}
                  {highlightImage && (
                    <div
                      class="w-full h-full absolute top-0 left-0 bg-cover bg-center opacity-0 duration-300 group-hover:opacity-100"
                      style={`background-image: url(${highlightImage.url})`}
                    />
                  )}
                </div>
                <h4 class="uppercase my-5">{item.title}</h4>
              </a>
              <div class="flex flex-col lg:flex-row flex-wrap gap-x-2 gap-y-2 items-start">
                {item.projectTypes.edges.map(({ node: type }) => (
                  <a
                    href={`#${type.slug}`}
                    x-data
                    x-on:click={`$dispatch("filter-project", {text: "${type.name}", value: "${type.slug}"})`}
                    class="inline-block smaller-text uppercase border-1 rounded-lg border-grey px-6 py-2"
                  >
                    {type.name}
                  </a>
                ))}
              </div>
            </div>
          );
        })
      }
    </div>
  </div>
</Layout>

<script>
  import Isotope from "isotope-layout";
  document.addEventListener("alpine:init", () => {
    Alpine.data("isotope", () => ({
      init() {
        this.isotopeGrid = new Isotope(this.$refs.grid, {
          itemSelector: ".project-card",
          masonry: {},
        });

        setTimeout(() => {
          if (window.location.hash) {
            for (const { node: type } of projectTypes) {
              if (type.slug === window.location.hash.substring(1)) {
                const event = new CustomEvent("filter-project", {
                  detail: { value: window.location.hash.substring(1) },
                });

                window.dispatchEvent(event);
              }
            }
          }
        }, 200);
      },
      grid: {
        ["@filter-project.window"]() {
          // console.log(this.$refs.grid);
          const filter =
            this.$event.detail.value === "all-projects"
              ? "*"
              : `.${this.$event.detail.value}`;
          this.isotopeGrid.arrange({ filter });
        },
      },
    }));
  });
</script>
