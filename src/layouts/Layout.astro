---
export interface Props {
  title: string;
  logoFile?: string;
  logoHoverFile?: string;
  logoSrc?: string;
  logoWrapperClassName?: string;
  className?: string;
  htmlClassName?: string;
  mainClassName?: string;
  footerClassName?: string;
  showCartButton?: boolean;
  enqueuedScripts?: object[];
  enqueuedStylesheets?: object[];
  data?: object;
}

import "../../styles/main.css";
import "../../styles/global.css";
import "../../styles/fontawesome.css";
import MobileMenu from "../components/MobileMenu.astro";
import Footer from "../components/Footer.astro";
import Button from "../components/Button.astro";

const {
  title,
  showCartButton = false,
  logoFile = "/img/logo-default.png",
  logoHoverFile = "/img/logo-default.gif",
  className = "",
  mainClassName = "",
  htmlClassName = "",
  logoWrapperClassName = "",
  footerClassName = "",
  logoSrc = "/",
  enqueuedScripts = [],
  enqueuedStylesheets = [],
  data = {},
} = Astro.props;

const snipcartKey = import.meta.env.PUBLIC_SNIPCART_KEY;
const backendUrl = import.meta.env.BACKEND_URL;
---

<!DOCTYPE html>
<html lang="en" class={htmlClassName}>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title} | Superhero Me</title>
    <!-- @todo add opengraph -->
    {
      enqueuedStylesheets.map(({ node }) => {
        if (node.src) {
          return (
            <link
              rel="stylesheet"
              id={node.id}
              href={`${node.src.match(/https/g) ? "" : backendUrl}${node.src}`}
              type="text/css"
              media="all"
            />
          );
        }
      })
    }
    {
      enqueuedScripts.map(({ node }) => {
        if (node.src) {
          return (
            <script
              type="text/javascript"
              id={node.id}
              src={`${node.src.match(/https/g) ? "" : backendUrl}${node.src}`}
              defer
            />
          );
        }
      })
    }
  </head>
  <body
    id="body"
    x-data
    :class="$store.scrollStop && $store.scrollStop.active && 'overflow-hidden'"
    class={`${className} ${
      data.__typename ? `${data.slug}-${data.__typename.toLowerCase()}` : ""
    }`}
  >
    <header id="header" class="header">
      <slot name="logo">
        <div class:list={["logo-wrapper", logoWrapperClassName]}>
          <a href={logoSrc} class="group">
            <img src={logoFile} class="lg:group-hover:opacity-0" alt="Home" />
            <img
              src={logoHoverFile}
              class="hidden lg:inline absolute top-0 left-0 opacity-0 group-hover:opacity-100"
              alt="Home"
            />
          </a>
        </div>
      </slot>
      <nav class="menu">
        <a href="/about" class="relative group">
          <span>About</span>
          <div
            class="absolute w-[280%] top-1/2 -translate-y-1/2 left-[-90%] aspect-[700_/_165] bg-cover group-hover:opacity-100 opacity-0"
            style="background-image: url(/img/about.gif)"
          >
          </div>
        </a>
        <a href="/people" class="relative group"
          ><span>Our Collective</span>
          <div
            class="absolute w-[140%] top-1/2 -translate-y-1/2 left-[-20%] aspect-[700_/_165] bg-cover group-hover:opacity-100 opacity-0"
            style="background-image: url(/img/collective.gif)"
          >
          </div>
        </a>
        <a href="/projects" class="relative group">
          <span>Projects</span>
          <div
            class="absolute w-[300%] top-1/2 -translate-y-1/2 left-[-100%] aspect-[700_/_165] bg-cover group-hover:opacity-100 opacity-0"
            style="background-image: url(/img/projects.gif)"
          >
          </div>
        </a>
        <a href="/shop" class="relative group">
          <span>Shop</span>
          <div
            class="absolute w-[400%] top-1/2 -translate-y-1/2 left-[-150%] aspect-[700_/_165] bg-cover group-hover:opacity-100 opacity-0"
            style="background-image: url(/img/shop.gif)"
          >
          </div>
        </a>
        <a href="/get-involved" class="relative group">
          <span>Get Involved</span>
          <div
            class="absolute w-[200%] top-1/2 -translate-y-1/2 left-[-50%] aspect-[700_/_165] bg-cover group-hover:opacity-100 opacity-0"
            style="background-image: url(/img/get-involved.gif)"
          >
          </div>
        </a>
      </nav>
      <div class="header-left">
        {
          showCartButton && (
            <button class="snipcart-checkout">
              Cart (<span class="snipcart-items-count">0</span>)
            </button>
          )
        }
        <MobileMenu />
      </div>
    </header>
    <main id="main" class={mainClassName}>
      <slot />
    </main>
    {
      data.pageFields?.footerCtaBar.nextPage && (
        <section class="action-bar" id="action-bar">
          <span class="inline-block lg:mr-10">
            {data.pageFields.footerCtaBar.subtitle}
          </span>
          <Button
            hoverTheme="black"
            href={`/${data.pageFields.footerCtaBar.nextPage.slug}`}
          >
            {data.pageFields.footerCtaBar.linkLabel}
          </Button>
        </section>
      )
    }
    <Footer
      className={data.pageFields?.footerCtaBar.nextPage
        ? `mt-0 ${footerClassName}`
        : `mt-16 lg:mt-28 ${footerClassName}`}
    />
    <style
      id="core-block-supports-inline-css"
      type="text/css"
      is:inline
      set:html={data.coreBlockInlineCSS}
    ></style>
    <script id="snipcart-starter" is:inline define:vars={{ snipcartKey }}>
      window.SnipcartSettings = {
        publicApiKey: snipcartKey,
        loadStrategy: "on-user-interaction",
        modalStyle: "side",
      };

      (function () {
        var c, d;
        (d = (c = window.SnipcartSettings).version) != null ||
          (c.version = "3.0");
        var s, S;
        (S = (s = window.SnipcartSettings).timeoutDuration) != null ||
          (s.timeoutDuration = 2750);
        var l, p;
        (p = (l = window.SnipcartSettings).domain) != null ||
          (l.domain = "cdn.snipcart.com");
        var w, u;
        (u = (w = window.SnipcartSettings).protocol) != null ||
          (w.protocol = "https");
        var m, g;
        (g = (m = window.SnipcartSettings).loadCSS) != null || (m.loadCSS = !0);
        var y =
            window.SnipcartSettings.version.includes("v3.0.0-ci") ||
            (window.SnipcartSettings.version != "3.0" &&
              window.SnipcartSettings.version.localeCompare("3.4.0", void 0, {
                numeric: !0,
                sensitivity: "base",
              }) === -1),
          f = ["focus", "mouseover", "touchmove", "scroll", "keydown"];
        window.LoadSnipcart = o;
        document.readyState === "loading"
          ? document.addEventListener("DOMContentLoaded", r)
          : r();
        function r() {
          window.SnipcartSettings.loadStrategy
            ? window.SnipcartSettings.loadStrategy === "on-user-interaction" &&
              (f.forEach(function (t) {
                return document.addEventListener(t, o);
              }),
              setTimeout(o, window.SnipcartSettings.timeoutDuration))
            : o();
        }
        var a = !1;
        function o() {
          if (a) return;
          a = !0;
          let t = document.getElementsByTagName("head")[0],
            n = document.querySelector("#snipcart"),
            i = document.querySelector(
              'src[src^="'
                .concat(window.SnipcartSettings.protocol, "://")
                .concat(
                  window.SnipcartSettings.domain,
                  '"][src$="snipcart.js"]'
                )
            ),
            e = document.querySelector(
              'link[href^="'
                .concat(window.SnipcartSettings.protocol, "://")
                .concat(
                  window.SnipcartSettings.domain,
                  '"][href$="snipcart.css"]'
                )
            );
          n ||
            ((n = document.createElement("div")),
            (n.id = "snipcart"),
            n.setAttribute("hidden", "true"),
            document.body.appendChild(n)),
            h(n),
            i ||
              ((i = document.createElement("script")),
              (i.src = ""
                .concat(window.SnipcartSettings.protocol, "://")
                .concat(window.SnipcartSettings.domain, "/themes/v")
                .concat(
                  window.SnipcartSettings.version,
                  "/default/snipcart.js"
                )),
              (i.async = !0),
              t.appendChild(i)),
            !e &&
              window.SnipcartSettings.loadCSS &&
              ((e = document.createElement("link")),
              (e.rel = "stylesheet"),
              (e.type = "text/css"),
              (e.href = ""
                .concat(window.SnipcartSettings.protocol, "://")
                .concat(window.SnipcartSettings.domain, "/themes/v")
                .concat(
                  window.SnipcartSettings.version,
                  "/default/snipcart.css"
                )),
              t.prepend(e)),
            f.forEach(function (v) {
              return document.removeEventListener(v, o);
            });
        }
        function h(t) {
          !y ||
            ((t.dataset.apiKey = window.SnipcartSettings.publicApiKey),
            window.SnipcartSettings.addProductBehavior &&
              (t.dataset.configAddProductBehavior =
                window.SnipcartSettings.addProductBehavior),
            window.SnipcartSettings.modalStyle &&
              (t.dataset.configModalStyle = window.SnipcartSettings.modalStyle),
            window.SnipcartSettings.currency &&
              (t.dataset.currency = window.SnipcartSettings.currency),
            window.SnipcartSettings.templatesUrl &&
              (t.dataset.templatesUrl = window.SnipcartSettings.templatesUrl));
        }
      })();
    </script>
    <script>
      import Alpine from "alpinejs";
      import intersect from "@alpinejs/intersect";
      import Isotope from "isotope-layout";
      Alpine.plugin(intersect);

      document.addEventListener("alpine:init", () => {
        Alpine.data("lottieLoop", (nextSelector, hasExitAnimation = true) => ({
          init() {
            if (this.$refs.startRef) {
              this.$refs.startRef.addEventListener(
                "load",
                () => {
                  this.$dispatch("lottieLoaded");
                },
                {
                  passive: true,
                  once: true,
                }
              );
            }
            if (this.$refs.loopRef) {
              this.$refs.loopRef.addEventListener(
                "load",
                () => {
                  this.$dispatch("lottieLoaded");
                },
                {
                  passive: true,
                  once: true,
                }
              );
            }
            if (this.$refs.endRef) {
              this.$refs.endRef.addEventListener(
                "load",
                () => {
                  this.$dispatch("lottieLoaded");
                },
                {
                  passive: true,
                  once: true,
                }
              );
            }
          },
          hasExitAnimation,
          nextSelector,
          buttonDelay: 1000,
          entered: false,
          loopStart: {
            "@complete"() {
              this.$refs.loopRef.classList.remove("lottie--inactive");
              this.$nextTick(() => {
                this.$el.remove();
                this.$refs.loopRef.play();
              });
            },
            "x-intersect.threshold.100.once"() {
              this.$el.classList.remove("lottie--inactive");
              this.$el.play();
              if (this.nextSelector) {
                this.$store.scrollStop.active = true;
              }
            },
          },
          animateLoopExit() {
            if (
              this.$el.getAttribute("revert-on-exit") &&
              this.hasExitAnimation
            ) {
              this.$el.setDirection(-1);
              this.$el.toggleLooping();
              this.$el.setSpeed(10);
              this.$el.addEventListener("complete", () => {
                const next = this.$refs.endRef;
                next.classList.remove("lottie--inactive");
                next.play();
                this.$el.classList.add("lottie--inactive");
                // this.entered = false;
              });
            } else {
              if (this.hasExitAnimation && this.entered) {
                const next = this.$refs.endRef;
                next.classList.remove("lottie--inactive");
                next.play();
                this.$el.classList.add("lottie--inactive");
                this.entered = false;
              } else if (this.entered && this.hasExitAnimation === false) {
                this.scrollToNextContainer();
              }
            }
          },
          scrollToNextContainer() {
            this.$store.scrollStop.active = false;
            if (this.nextSelector) {
              const next = document.querySelector(this.nextSelector);
              next.scrollIntoView({ behavior: "smooth" });
              const loopElem = this.$refs.loopRef;
              setTimeout(() => {
                if (this.hasExitAnimation) {
                  this.$el.remove();
                }
                loopElem.classList.remove("lottie--inactive");
                if (loopElem.getAttribute("revert-on-exit")) {
                  loopElem.setDirection(1);
                  loopElem.setSpeed(1);
                  loopElem.toggleLooping();
                  loopElem.play();
                }
              }, 2000);
            } else {
              this.$store.scrollStop.active = false;
            }
          },
          splash: {
            "@play.once"() {
              if (this.entered === false) {
                this.$store.scrollStop.active = true;
                this.entered = true;
              }
            },
            "@lotties-fully-loaded.window.camel.once"() {
              const goNext = (event) => {
                if (event.deltaY > 0) {
                  this.animateLoopExit();
                } else {
                  if (this.nextSelector) {
                    this.$store.scrollStop.active = false;
                  }
                }
              };
              this.$el.addEventListener("scrollend", goNext, {
                passive: true,
                once: true,
              });
              this.$el.addEventListener("wheel", goNext, {
                passive: true,
                once: true,
              });
            },
          },
          loop: {
            "x-intersect.threshold.100.once"() {
              if (
                this.$refs.loopRef &&
                !!!this.$refs.startRef &&
                !!!this.$refs.endRef
              ) {
                this.$store.scrollStop.active = false;
              }
              if (!!!this.$refs.startRef) {
                this.$el.classList.remove("lottie--inactive");
                this.$el.play();
              }
            },
            "@play.once"() {
              if (this.entered === false) {
                this.$store.scrollStop.active = true;
                this.entered = true;
              }
            },
            "@wheel.once.passive"(event) {
              if (event.deltaY > 0) {
                this.animateLoopExit();
              } else {
                if (this.nextSelector) {
                  this.$store.scrollStop.active = false;
                }
              }
            },
            "@scrollend.once.passive"(event) {
              console.log(event);
              this.animateLoopExit();
            },
          },
          loopExit: {
            "@complete.once"() {
              this.scrollToNextContainer();
            },
          },
        }));

        Alpine.data("dropdown", ({ options, defaultOption }) => ({
          options,
          open: false,
          selected: defaultOption,
          panel: {
            ["@filter-project.window"]() {
              if (this.selected.value !== this.$event.detail.value) {
                for (const { text, value } of this.options) {
                  if (value === this.$event.detail.value) {
                    this.selected = { text, value };
                  }
                }
              }
            },
          },
          toggle() {
            if (this.open) {
              return this.close();
            }

            this.$refs.button.focus();

            this.open = true;
          },
          close(focusAfter) {
            if (!this.open) return;
            this.open = false;

            focusAfter && focusAfter.focus();
          },
        }));

        Alpine.data("isotope", ({ projectTypes }) => ({
          projectTypes,
          init() {
            this.isotopeGrid = new Isotope(this.$refs.grid, {
              itemSelector: ".project-card",
              masonry: {},
            });

            setTimeout(() => {
              if (window.location.hash) {
                for (const { node: type } of this.projectTypes) {
                  if (type.slug === window.location.hash.substring(1)) {
                    const event = new CustomEvent("filter-project", {
                      detail: { value: window.location.hash.substring(1) },
                    });

                    window.dispatchEvent(event);
                  }
                }
              }
            }, 200);
          },
          grid: {
            ["@filter-project.window"]() {
              // console.log(this.$refs.grid);
              const filter =
                this.$event.detail.value === "all-projects"
                  ? "*"
                  : `.${this.$event.detail.value}`;
              this.isotopeGrid.arrange({ filter });
            },
          },
        }));

        Alpine.data("accordion", (openByDefault) => ({
          collapsed: !openByDefault,
          show: false,
          accordionWrapper: {
            ["x-effect"]() {
              if (this.show) {
                this.$el.classList.remove("opacity-0", "translate-y-4");
              } else {
                this.$el.classList.add("opacity-0", "translate-y-4");
              }
            },
            ["x-intersect.half.once"]() {
              this.show = true;
            },
          },
          accordionIcon: {
            [":class"]() {
              return this.collapsed ? "fa-plus" : "fa-minus";
            },
          },
          accordionBtn: {
            ["@click"]() {
              this.collapsed = !this.collapsed;
            },
          },
          accordionBody: {
            [":class"]() {
              return this.collapsed ? "" : "max-h-infinite";
            },
          },
          init() {
            console.log(222, "accordion");
          },
        }));

        Alpine.store("scrollStop", {
          active: false,
          toggle() {
            this.active = !this.active;
          },
        });

        Alpine.data("mobileMenu", () => ({
          init() {
            console.log(234);
          },
          expanded: false,

          toggle() {
            this.expanded = !this.expanded;
          },

          menuWrapper: {
            ["x-effect"]() {
              if (this.expanded) {
                document.querySelector("body").classList.add("overflow-hidden");
                let x = 1;
                for (let item of this.$el.children) {
                  setTimeout(() => {
                    item.classList.add("!opacity-100", "!translate-y-0");
                  }, x * 80 + 200);
                  x += 1;
                }
              } else {
                document
                  .querySelector("body")
                  .classList.remove("overflow-hidden");
                for (let item of this.$el.children) {
                  item.classList.remove("!opacity-100", "!translate-y-0");
                }
                // this.$el.children.forEach((item) => {
                //   item.classList.remove("!opacity-100", "!translate-y-0");
                // });
              }
            },
            ["x-bind:class"]() {
              return this.expanded ? "mobile-menu--show" : "";
            },
          },
        }));
      });

      window.Alpine = Alpine;
      Alpine.start();
    </script>
  </body>
</html>
