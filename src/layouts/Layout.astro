---
export interface Props {
  title: string;
  logoFile?: string;
  logoHoverFile?: string;
  logoSrc?: string;
  logoWrapperClassName?: string;
  className?: string;
  htmlClassName?: string;
  mainClassName?: string;
  footerClassName?: string;
  showCartButton?: boolean;
  enqueuedScripts?: object[];
  enqueuedStylesheets?: object[];
  data?: any;
}

import "../../styles/main.css";
import "../../styles/global.css";
import "../../styles/fontawesome.css";
import MobileMenu from "../components/MobileMenu.astro";
import Footer from "../components/Footer.astro";
import Button from "../components/Button.astro";

const {
  title,
  showCartButton = false,
  logoFile = "/img/logo-default.png",
  logoHoverFile = "/img/logo-default.gif",
  className = "",
  mainClassName = "",
  htmlClassName = "",
  logoWrapperClassName = "",
  footerClassName = "",
  logoSrc = "/",
  enqueuedScripts = [],
  enqueuedStylesheets = [],
  data = {},
} = Astro.props;

const { desktopNav, mobileNav, footerNav } = data;

let description = "";
let coverImage = "";

if (data.seo?.description) description = data.seo.description;
if (data.seo?.image) coverImage = data.seo.image.sourceUrl;

const snipcartKey = import.meta.env.PUBLIC_SNIPCART_KEY;
const backendUrl = import.meta.env.BACKEND_URL;

const cachedStyles = await Promise.all(enqueuedStylesheets.map(({node}) => new Promise(async (resolve, reject) => {
  if (node.src) {
    const response = await fetch(`${node.src.match(/https/g) ? "" : backendUrl}${node.src}`);
    const text = await response.text();
    resolve(text);
  } else {
    resolve(null);
  }
}) ))

---

<!DOCTYPE html>
<html lang="en" class={htmlClassName}>
  <head>
    <!-- Google tag (gtag.js) -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-2Y5864EZS5"></script>
    <script is:inline>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());

      gtag('config', 'G-2Y5864EZS5');
    </script>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title} | Superhero Me</title>
    <meta property="og:title" content={`${title} | Superhero Me`} />
    {
      description.length > 0 && (
        <>
          <meta name="description" content={description} />
          <meta property="og:description" content={description} />
        </>
      )
    }
    {coverImage.length > 0 && <meta property="og:image" content={coverImage} />}
    {cachedStyles.map((style) => (<style type='text/css' set:text={style}></style>))}
    {
      enqueuedScripts.map(({ node }) => {
        if (node.src) {
          return (
            <script
              type="text/javascript"
              id={node.id}
              src={`${node.src.match(/https/g) ? "" : backendUrl}${node.src}`}
              defer
            />
          );
        }
      })
    }
  </head>
  <body
    id="body"
    x-data
    :class="$store.scrollStop && $store.scrollStop.active && 'overflow-hidden'"
    class={`${className} ${
      data.__typename ? `${data.slug}-${data.__typename.toLowerCase()}` : ""
    }`}
  >
    <header id="header" class="header">
      <slot name="logo">
        <div class:list={["logo-wrapper", logoWrapperClassName]}>
          <a href={logoSrc} class="group">
            <img src={logoFile} class="lg:group-hover:opacity-0" alt="Home" />
            <img
              src={logoHoverFile}
              class="hidden lg:inline absolute top-0 left-0 opacity-0 group-hover:opacity-100"
              alt="Home"
            />
          </a>
        </div>
      </slot>
      <nav class="menu">
        {desktopNav && desktopNav.menuItems.nodes.map((menu) => (
          <a href={menu.uri} class={`relative group ${menu.menuItemFields.cssClasses || ""}`} {...(menu.target ? { target: menu.target }: {})}>
            <span>{menu.label}</span>
            {menu.menuItemFields.hoverGif && (
              <div
                class="absolute top-1/2 -translate-y-1/2 aspect-[700_/_165] bg-cover group-hover:opacity-100 opacity-0"
                style={{ backgroundImage: `url(${menu.menuItemFields.hoverGif.sourceUrl})`, width: `${menu.menuItemFields.hoverGifWidth}%`, left: `${menu.menuItemFields.hoverGifLeftMargin}%` }}
              >
              </div>
            )}
          </a>
        ))}
      </nav>
      <div class="header-left">
        {
          showCartButton && (
            <button class="snipcart-checkout">
              Cart (<span class="snipcart-items-count">0</span>)
            </button>
          )
        }
        <button class="mobile-menu-btn" @click="$store.mobileMenu.toggle()">
          <img
            x-show="$store.mobileMenu.expanded === false"
            src="/img/hamburger.svg"
            alt=""
          />
          <span
            class="fal fa-times leading-4 text-3xl pt-1"
            x-cloak
            x-show="$store.mobileMenu.expanded"></span>
        </button>
      </div>
    </header>
    {mobileNav && <MobileMenu data={mobileNav.menuItems.nodes} showCartButton={showCartButton} />}
    <main id="main" class={mainClassName}>
      <slot />
    </main>
    {
      data.pageFields?.footerCtaBar.nextPage && (
        <section class="action-bar" id="action-bar">
          <span class="inline-block lg:mr-10">
            {data.pageFields.footerCtaBar.subtitle}
          </span>
          <Button
            hoverTheme="black"
            href={`/${data.pageFields.footerCtaBar.nextPage.slug}`}
          >
            {data.pageFields.footerCtaBar.linkLabel}
          </Button>
        </section>
      )
    }
    <Footer
      data={footerNav ? footerNav.menuItems.nodes : []} showCartButton={showCartButton}
      className={data.pageFields?.footerCtaBar.nextPage
        ? `mt-0 ${footerClassName}`
        : `mt-16 lg:mt-28 ${footerClassName}`}
    />
    {data.coreBlockInlineCSS && (
      <style
      id="core-block-supports-inline-css"
      type="text/css"
      is:inline
      set:html={data.coreBlockInlineCSS}
      ></style>
    )}
    { showCartButton && (<script id="snipcart-starter" is:inline define:vars={{ snipcartKey }}>
      window.SnipcartSettings = {
        publicApiKey: snipcartKey,
        loadStrategy: "on-user-interaction",
        modalStyle: "side",
      };

      (function () {
        var c, d;
        (d = (c = window.SnipcartSettings).version) != null ||
          (c.version = "3.0");
        var s, S;
        (S = (s = window.SnipcartSettings).timeoutDuration) != null ||
          (s.timeoutDuration = 2750);
        var l, p;
        (p = (l = window.SnipcartSettings).domain) != null ||
          (l.domain = "cdn.snipcart.com");
        var w, u;
        (u = (w = window.SnipcartSettings).protocol) != null ||
          (w.protocol = "https");
        var m, g;
        (g = (m = window.SnipcartSettings).loadCSS) != null || (m.loadCSS = !0);
        var y =
            window.SnipcartSettings.version.includes("v3.0.0-ci") ||
            (window.SnipcartSettings.version != "3.0" &&
              window.SnipcartSettings.version.localeCompare("3.4.0", void 0, {
                numeric: !0,
                sensitivity: "base",
              }) === -1),
          f = ["focus", "mouseover", "touchmove", "scroll", "keydown"];
        window.LoadSnipcart = o;
        document.readyState === "loading"
          ? document.addEventListener("DOMContentLoaded", r)
          : r();
        function r() {
          window.SnipcartSettings.loadStrategy
            ? window.SnipcartSettings.loadStrategy === "on-user-interaction" &&
              (f.forEach(function (t) {
                return document.addEventListener(t, o);
              }),
              setTimeout(o, window.SnipcartSettings.timeoutDuration))
            : o();
        }
        var a = !1;
        function o() {
          if (a) return;
          a = !0;
          let t = document.getElementsByTagName("head")[0],
            n = document.querySelector("#snipcart"),
            i = document.querySelector(
              'src[src^="'
                .concat(window.SnipcartSettings.protocol, "://")
                .concat(
                  window.SnipcartSettings.domain,
                  '"][src$="snipcart.js"]'
                )
            ),
            e = document.querySelector(
              'link[href^="'
                .concat(window.SnipcartSettings.protocol, "://")
                .concat(
                  window.SnipcartSettings.domain,
                  '"][href$="snipcart.css"]'
                )
            );
          n ||
            ((n = document.createElement("div")),
            (n.id = "snipcart"),
            n.setAttribute("hidden", "true"),
            document.body.appendChild(n)),
            h(n),
            i ||
              ((i = document.createElement("script")),
              (i.src = ""
                .concat(window.SnipcartSettings.protocol, "://")
                .concat(window.SnipcartSettings.domain, "/themes/v")
                .concat(
                  window.SnipcartSettings.version,
                  "/default/snipcart.js"
                )),
              (i.async = !0),
              t.appendChild(i)),
            !e &&
              window.SnipcartSettings.loadCSS &&
              ((e = document.createElement("link")),
              (e.rel = "stylesheet"),
              (e.type = "text/css"),
              (e.href = ""
                .concat(window.SnipcartSettings.protocol, "://")
                .concat(window.SnipcartSettings.domain, "/themes/v")
                .concat(
                  window.SnipcartSettings.version,
                  "/default/snipcart.css"
                )),
              t.prepend(e)),
            f.forEach(function (v) {
              return document.removeEventListener(v, o);
            });
        }
        function h(t) {
          !y ||
            ((t.dataset.apiKey = window.SnipcartSettings.publicApiKey),
            window.SnipcartSettings.addProductBehavior &&
              (t.dataset.configAddProductBehavior =
                window.SnipcartSettings.addProductBehavior),
            window.SnipcartSettings.modalStyle &&
              (t.dataset.configModalStyle = window.SnipcartSettings.modalStyle),
            window.SnipcartSettings.currency &&
              (t.dataset.currency = window.SnipcartSettings.currency),
            window.SnipcartSettings.templatesUrl &&
              (t.dataset.templatesUrl = window.SnipcartSettings.templatesUrl));
        }
      })();
    </script>)}
    <script>
      import "@lottiefiles/lottie-player";
      import Isotope from "isotope-layout";
      import Alpine from "alpinejs";
      import intersect from "@alpinejs/intersect";
      Alpine.plugin(intersect);
    </script>

    <script is:inline>
      document.addEventListener("alpine:init", () => {
        Alpine.store("scrollStop", {
          active: false,
          toggle() {
            this.active = !this.active;
          },
        });

        Alpine.store("mobileMenu", {
          expanded: false,
          toggle() {
            this.expanded = !this.expanded;
          },
        });
      });
    </script>
  </body>
</html>
